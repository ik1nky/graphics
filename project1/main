#include <iostream>
#include <cmath>
#include <algorithm>

#define GLEW_STATIC
#include <GL/glew.h>
#ifdef __APPLE__
#include <OpenGL/glu.h>
#else
#include <GL/gl.h>
#include <GL/glu.h>
#endif

#include <glm/glm.hpp>
#include <glm/gtc/quaternion.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtx/vector_angle.hpp>
#include <glm/gtx/io.hpp>
//#include "Sphere.h"
//#include "HexNut.h"
#undef GLFW_DLL
#include <GLFW/glfw3.h>

using namespace std;

void init_model();
void win_refresh(GLFWwindow*);
float arc_ball_rad_square;
int screen_ctr_x, screen_ctr_y;

glm::mat4 camera_cf; // {glm::translate(glm::mat4(1.0f), glm::vec3{0,0,-5})};
glm::mat4 hex1_cf;

void err_function (int what, const char *msg) {
    cerr << what << " " << msg << endl;
}


void win_resize (GLFWwindow * win, int width, int height)
{
#ifdef DEBUG
    cout << __FUNCTION__ << " " << width << "x" << height << endl;
#endif
    int w, h;
    glfwGetWindowSize(win, &w, &h);
    screen_ctr_x = w / 2.0;
    screen_ctr_y = h / 2.0;
    float rad = min(h,w)/2;
    arc_ball_rad_square = rad * rad;
    /* Use the entire window for our view port */
    glViewport(0, 0, width, height);
    /* Use GL_PROJECTION to select the type of synthetic camera */
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    /* near-plane(1) & far-plane(10) are always POSITIVE and they measure
     * the distances along the Z-axis in front of the camera */
    gluPerspective(60.0, static_cast<float> (width)/ static_cast<float> (height), 1, 10);
}

void win_refresh (GLFWwindow *win) {
//    cout << __PRETTY_FUNCTION__ << endl;
    glClearColor(0, 0, 0, 1);
    glClear(GL_COLOR_BUFFER_BIT| GL_DEPTH_BUFFER_BIT);

    glMatrixMode (GL_MODELVIEW);
    glLoadIdentity();
    /* place the camera using the camera coordinate frame */
    glMultMatrixf (glm::value_ptr(camera_cf));

    const float& S = one.radius();
    /* draw the axes */
    glBegin(GL_LINES);
    glColor3ub (255, 0, 0);
    glVertex2i (0, 0);
    glVertex2f (S * 1.1, 0);
    glColor3ub (0, 255, 0);
    glVertex2i (0, 0);
    glVertex2f (0, S * 1.1);
    glColor3ub (0, 0, 255);
    glVertex2i (0, 0);
    glVertex3f (0, 0, S * 1.1);
    glEnd();

    /* The following two groups of GL_LINE_LOOP and GL_LINES draw the square block
     * whose 4 vertices make the tetrahedron */
    glColor3ub (255, 200, 0);
    glBegin(GL_LINE_LOOP);
    glVertex3f(S, S, S);
    glVertex3f(-S, S, S);
    glVertex3f(-S, -S, S);
    glVertex3f(S, -S, S);
    glEnd();
    glBegin(GL_LINE_LOOP);
    glVertex3f(S, S, -S);
    glVertex3f(-S, S, -S);
    glVertex3f(-S, -S, -S);
    glVertex3f(S, -S, -S);
    glEnd();

    glBegin(GL_LINES);
    glVertex3f(S, S, S);
    glVertex3f(S, S, -S);
    glVertex3f(-S, S, S);
    glVertex3f(-S, S, -S);
    glVertex3f(-S, -S, S);
    glVertex3f(-S, -S, -S);
    glVertex3f(S, -S, S);
    glVertex3f(S, -S, -S);
    glEnd();

    one.render(false);  /* true: super impose the polygon outline */

    glPushMatrix();
    glTranslatef(S, S, -S);
    glRotatef(-45, 1, 0, 0);

    two.render(false);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(-S, S, S);
    glMultMatrixf(glm::value_ptr(hex1_cf));
    two.render(false);
    glPopMatrix();

    /* must swap buffer at the end of render function */
    glfwSwapBuffers(win);
}
